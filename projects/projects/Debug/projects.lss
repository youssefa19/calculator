
projects.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000027a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000300  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e06  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e1  00000000  00000000  000011da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000644  00000000  00000000  000019bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  00002000  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004fc  00000000  00000000  000020f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000099f  00000000  00000000  000025f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002f8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e7       	ldi	r30, 0x7A	; 122
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 a0 00 	call	0x140	; 0x140 <main>
  7a:	0c 94 3b 01 	jmp	0x276	; 0x276 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <WriteIns>:


#define  F_CPU 8000000
#include <util/delay.h>

static void WriteIns(u8 ins){
  82:	cf 93       	push	r28
  84:	c8 2f       	mov	r28, r24
	//function set
	DIO_WritePin(RS,LOW);
  86:	60 e0       	ldi	r22, 0x00	; 0
  88:	89 e0       	ldi	r24, 0x09	; 9
  8a:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_WritePin>
	DIO_WritePort(LCD_PORT,ins);
  8e:	6c 2f       	mov	r22, r28
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	0e 94 2b 01 	call	0x256	; 0x256 <DIO_WritePort>
	//enable import to make micro in LCD received data send
	DIO_WritePin(EN,HIGH);
  96:	61 e0       	ldi	r22, 0x01	; 1
  98:	88 e0       	ldi	r24, 0x08	; 8
  9a:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	8f ec       	ldi	r24, 0xCF	; 207
  a0:	97 e0       	ldi	r25, 0x07	; 7
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <WriteIns+0x20>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <WriteIns+0x26>
  a8:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	88 e0       	ldi	r24, 0x08	; 8
  ae:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_WritePin>
  b2:	8f ec       	ldi	r24, 0xCF	; 207
  b4:	97 e0       	ldi	r25, 0x07	; 7
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <WriteIns+0x34>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <WriteIns+0x3a>
  bc:	00 00       	nop
	_delay_ms(1);
}
  be:	cf 91       	pop	r28
  c0:	08 95       	ret

000000c2 <WriteData>:

static void WriteData(u8 data){
  c2:	cf 93       	push	r28
  c4:	c8 2f       	mov	r28, r24
	//function set
	DIO_WritePin(RS,LOW);
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	89 e0       	ldi	r24, 0x09	; 9
  ca:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_WritePin>
	DIO_WritePort(LCD_PORT,data);
  ce:	6c 2f       	mov	r22, r28
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	0e 94 2b 01 	call	0x256	; 0x256 <DIO_WritePort>
	//enable import to make micro in LCD received data send
	DIO_WritePin(EN,HIGH);
  d6:	61 e0       	ldi	r22, 0x01	; 1
  d8:	88 e0       	ldi	r24, 0x08	; 8
  da:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_WritePin>
  de:	8f ec       	ldi	r24, 0xCF	; 207
  e0:	97 e0       	ldi	r25, 0x07	; 7
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <WriteData+0x20>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <WriteData+0x26>
  e8:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	88 e0       	ldi	r24, 0x08	; 8
  ee:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_WritePin>
  f2:	8f ec       	ldi	r24, 0xCF	; 207
  f4:	97 e0       	ldi	r25, 0x07	; 7
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <WriteData+0x34>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <WriteData+0x3a>
  fc:	00 00       	nop
	_delay_ms(1);
}
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <LCD_Init>:
 102:	2f e7       	ldi	r18, 0x7F	; 127
 104:	88 e3       	ldi	r24, 0x38	; 56
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <LCD_Init+0x6>
 110:	00 c0       	rjmp	.+0      	; 0x112 <LCD_Init+0x10>
 112:	00 00       	nop

void LCD_Init(void){
	_delay_ms(50);
	WriteIns(0x38);
 114:	88 e3       	ldi	r24, 0x38	; 56
 116:	0e 94 41 00 	call	0x82	; 0x82 <WriteIns>
	WriteIns(0X0F);//0X0C,0x0e
 11a:	8f e0       	ldi	r24, 0x0F	; 15
 11c:	0e 94 41 00 	call	0x82	; 0x82 <WriteIns>
	WriteIns(0x01); 
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	0e 94 41 00 	call	0x82	; 0x82 <WriteIns>
 126:	8f ec       	ldi	r24, 0xCF	; 207
 128:	97 e0       	ldi	r25, 0x07	; 7
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <LCD_Init+0x28>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <LCD_Init+0x2e>
 130:	00 00       	nop
	_delay_ms(1);
	WriteIns(0x06);
 132:	86 e0       	ldi	r24, 0x06	; 6
 134:	0e 94 41 00 	call	0x82	; 0x82 <WriteIns>
 138:	08 95       	ret

0000013a <LCD_WriteChar>:
}


void LCD_WriteChar(u8 ch){
	WriteData(ch);
 13a:	0e 94 61 00 	call	0xc2	; 0xc2 <WriteData>
 13e:	08 95       	ret

00000140 <main>:
#include "LCD_Interface.h"


int main(void)
{ 
	LCD_Init();
 140:	0e 94 81 00 	call	0x102	; 0x102 <LCD_Init>
	LCD_WriteChar('A');
 144:	81 e4       	ldi	r24, 0x41	; 65
 146:	0e 94 9d 00 	call	0x13a	; 0x13a <LCD_WriteChar>
 14a:	ff cf       	rjmp	.-2      	; 0x14a <main+0xa>

0000014c <DIO_WritePin>:
		volt=READ_BIT(PIND,pin_num);
		break;
	}
	
	return volt;
}
 14c:	98 2f       	mov	r25, r24
 14e:	96 95       	lsr	r25
 150:	96 95       	lsr	r25
 152:	96 95       	lsr	r25
 154:	87 70       	andi	r24, 0x07	; 7
 156:	61 30       	cpi	r22, 0x01	; 1
 158:	e1 f5       	brne	.+120    	; 0x1d2 <DIO_WritePin+0x86>
 15a:	91 30       	cpi	r25, 0x01	; 1
 15c:	99 f0       	breq	.+38     	; 0x184 <DIO_WritePin+0x38>
 15e:	28 f0       	brcs	.+10     	; 0x16a <DIO_WritePin+0x1e>
 160:	92 30       	cpi	r25, 0x02	; 2
 162:	e9 f0       	breq	.+58     	; 0x19e <DIO_WritePin+0x52>
 164:	93 30       	cpi	r25, 0x03	; 3
 166:	41 f1       	breq	.+80     	; 0x1b8 <DIO_WritePin+0x6c>
 168:	08 95       	ret
 16a:	4b b3       	in	r20, 0x1b	; 27
 16c:	21 e0       	ldi	r18, 0x01	; 1
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	b9 01       	movw	r22, r18
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_WritePin+0x2c>
 174:	66 0f       	add	r22, r22
 176:	77 1f       	adc	r23, r23
 178:	8a 95       	dec	r24
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_WritePin+0x28>
 17c:	cb 01       	movw	r24, r22
 17e:	84 2b       	or	r24, r20
 180:	8b bb       	out	0x1b, r24	; 27
 182:	08 95       	ret
 184:	48 b3       	in	r20, 0x18	; 24
 186:	21 e0       	ldi	r18, 0x01	; 1
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	b9 01       	movw	r22, r18
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_WritePin+0x46>
 18e:	66 0f       	add	r22, r22
 190:	77 1f       	adc	r23, r23
 192:	8a 95       	dec	r24
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_WritePin+0x42>
 196:	cb 01       	movw	r24, r22
 198:	84 2b       	or	r24, r20
 19a:	88 bb       	out	0x18, r24	; 24
 19c:	08 95       	ret
 19e:	45 b3       	in	r20, 0x15	; 21
 1a0:	21 e0       	ldi	r18, 0x01	; 1
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	b9 01       	movw	r22, r18
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_WritePin+0x60>
 1a8:	66 0f       	add	r22, r22
 1aa:	77 1f       	adc	r23, r23
 1ac:	8a 95       	dec	r24
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_WritePin+0x5c>
 1b0:	cb 01       	movw	r24, r22
 1b2:	84 2b       	or	r24, r20
 1b4:	85 bb       	out	0x15, r24	; 21
 1b6:	08 95       	ret
 1b8:	42 b3       	in	r20, 0x12	; 18
 1ba:	21 e0       	ldi	r18, 0x01	; 1
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	b9 01       	movw	r22, r18
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_WritePin+0x7a>
 1c2:	66 0f       	add	r22, r22
 1c4:	77 1f       	adc	r23, r23
 1c6:	8a 95       	dec	r24
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_WritePin+0x76>
 1ca:	cb 01       	movw	r24, r22
 1cc:	84 2b       	or	r24, r20
 1ce:	82 bb       	out	0x12, r24	; 18
 1d0:	08 95       	ret
 1d2:	61 11       	cpse	r22, r1
 1d4:	3f c0       	rjmp	.+126    	; 0x254 <DIO_WritePin+0x108>
 1d6:	91 30       	cpi	r25, 0x01	; 1
 1d8:	a1 f0       	breq	.+40     	; 0x202 <DIO_WritePin+0xb6>
 1da:	28 f0       	brcs	.+10     	; 0x1e6 <DIO_WritePin+0x9a>
 1dc:	92 30       	cpi	r25, 0x02	; 2
 1de:	f9 f0       	breq	.+62     	; 0x21e <DIO_WritePin+0xd2>
 1e0:	93 30       	cpi	r25, 0x03	; 3
 1e2:	59 f1       	breq	.+86     	; 0x23a <DIO_WritePin+0xee>
 1e4:	08 95       	ret
 1e6:	4b b3       	in	r20, 0x1b	; 27
 1e8:	21 e0       	ldi	r18, 0x01	; 1
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	b9 01       	movw	r22, r18
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_WritePin+0xa8>
 1f0:	66 0f       	add	r22, r22
 1f2:	77 1f       	adc	r23, r23
 1f4:	8a 95       	dec	r24
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_WritePin+0xa4>
 1f8:	cb 01       	movw	r24, r22
 1fa:	80 95       	com	r24
 1fc:	84 23       	and	r24, r20
 1fe:	8b bb       	out	0x1b, r24	; 27
 200:	08 95       	ret
 202:	48 b3       	in	r20, 0x18	; 24
 204:	21 e0       	ldi	r18, 0x01	; 1
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	b9 01       	movw	r22, r18
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_WritePin+0xc4>
 20c:	66 0f       	add	r22, r22
 20e:	77 1f       	adc	r23, r23
 210:	8a 95       	dec	r24
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_WritePin+0xc0>
 214:	cb 01       	movw	r24, r22
 216:	80 95       	com	r24
 218:	84 23       	and	r24, r20
 21a:	88 bb       	out	0x18, r24	; 24
 21c:	08 95       	ret
 21e:	45 b3       	in	r20, 0x15	; 21
 220:	21 e0       	ldi	r18, 0x01	; 1
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	b9 01       	movw	r22, r18
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_WritePin+0xe0>
 228:	66 0f       	add	r22, r22
 22a:	77 1f       	adc	r23, r23
 22c:	8a 95       	dec	r24
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_WritePin+0xdc>
 230:	cb 01       	movw	r24, r22
 232:	80 95       	com	r24
 234:	84 23       	and	r24, r20
 236:	85 bb       	out	0x15, r24	; 21
 238:	08 95       	ret
 23a:	42 b3       	in	r20, 0x12	; 18
 23c:	21 e0       	ldi	r18, 0x01	; 1
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	b9 01       	movw	r22, r18
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_WritePin+0xfc>
 244:	66 0f       	add	r22, r22
 246:	77 1f       	adc	r23, r23
 248:	8a 95       	dec	r24
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_WritePin+0xf8>
 24c:	cb 01       	movw	r24, r22
 24e:	80 95       	com	r24
 250:	84 23       	and	r24, r20
 252:	82 bb       	out	0x12, r24	; 18
 254:	08 95       	ret

00000256 <DIO_WritePort>:
void DIO_WritePort(DIO_Port_type port,u8 value){
	switch(port)
 256:	81 30       	cpi	r24, 0x01	; 1
 258:	41 f0       	breq	.+16     	; 0x26a <DIO_WritePort+0x14>
 25a:	28 f0       	brcs	.+10     	; 0x266 <DIO_WritePort+0x10>
 25c:	82 30       	cpi	r24, 0x02	; 2
 25e:	39 f0       	breq	.+14     	; 0x26e <DIO_WritePort+0x18>
 260:	83 30       	cpi	r24, 0x03	; 3
 262:	39 f0       	breq	.+14     	; 0x272 <DIO_WritePort+0x1c>
 264:	08 95       	ret
	{
		case PA:
		PORTA=value;
 266:	6b bb       	out	0x1b, r22	; 27
		break;
 268:	08 95       	ret
		case PB:
		PORTB=value;
 26a:	68 bb       	out	0x18, r22	; 24
		break;
 26c:	08 95       	ret
		case PC:
		PORTC=value;
 26e:	65 bb       	out	0x15, r22	; 21
		break;
 270:	08 95       	ret
		case PD:
		PORTD=value;
 272:	62 bb       	out	0x12, r22	; 18
 274:	08 95       	ret

00000276 <_exit>:
 276:	f8 94       	cli

00000278 <__stop_program>:
 278:	ff cf       	rjmp	.-2      	; 0x278 <__stop_program>
